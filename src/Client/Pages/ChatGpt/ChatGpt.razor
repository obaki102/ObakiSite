@page "/obaki/chatgpt/chat"
@layout ChatGptLayout
@inject NavigationManager NavigationManager
@inject IConfiguration ConfigurationManager
@inject ISender Mediatr
@inject ISnackbar Snackbar
<PageTitle>Ask ChatGpt</PageTitle>
<div id="scrollableDiv" style="overflow-y: scroll;">
    <div Class="d-flex flex-column flex-grow-1 gap-1" Elevation="0">
        @foreach (var message in _messages)
        {
            @if (IsMyMessage(message.User))
            {
                <MudPaper Class="pa-2 mt-4 mb-4 overflow-auto rounded-lg" Style="word-break: break-all;" Outlined="true">
                    <MudText Typo="Typo.body2" Class="mx-1">@message.Message</MudText>
                </MudPaper>
            }
            else
            {
                <MudPaper Class="pa-2 mt-4 mb-4 overflow-auto mud-theme-primary rounded-lg" Style="word-break: break-all;" Outlined="true">
                    <MudText Typo="Typo.body2" Class="mx-1">@message.Message</MudText>
                </MudPaper>
            }
        }
    </div>
</div>

<MudAppBar Bottom="true" Fixed="true"  Color="Color.Tertiary" Elevation="0" Class="mb-4">
    <MudContainer MaxWidth="MaxWidth.Medium" Class="align-center">
        <div class="d-flex align-center " Elevation="1">
            <MudTextField T="string" Label="Send a message" Class="mr-4" Variant="Variant.Filled" FullWidth="true" Lines="2" @bind-Value="_enteredMessage" @onkeydown="OnEnterKeyPress" TextUpdateSuppression="false" DisableUnderLine="true" Immediate="true" />
            @if (!isSending)
            {
                <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="SendMessage" Size="Size.Medium" Disabled="IsMessageEmpty()" />
            }
            else
            {
                <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
            }
        </div>
    </MudContainer>
</MudAppBar>
@code {
    private List<ChatMessage> _messages = new();
    private ChatMessage chatMessage = new();
    private string _enteredMessage { get; set; } = string.Empty;
    private bool isMyMessage = true;
    private const string currentUser = "CurrentUser";
    private bool isSending = false;

    private async Task OnEnterKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (!IsMessageEmpty())
                await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        isSending = true;
        _messages.Add(new ChatMessage
            {
                User = currentUser,
                Message = _enteredMessage
            });
        var response = await Mediatr.Send(new AskChatGpt(_enteredMessage));
        _enteredMessage = string.Empty;

        if (response.IsSuccess)
        {
            _messages.Add(new ChatMessage
                {
                    User = "chatGPT",
                    Message = response.Value.Result
                });
        }
        else
        {
            Snackbar.Add(response.Error, Severity.Error);
        }

        isSending = false;
        StateHasChanged();
    }

    public bool IsMyMessage(string name)
    {
        if (name.Equals(currentUser))
            return true;

        return false;
    }

    public bool IsMessageEmpty()
    {
        if (_enteredMessage.Length == 0)
            return true;

        return false;
    }
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await JsRuntime.InvokeAsync<string>("ScrollToBottom", "scrollableDiv");
    //}

}
