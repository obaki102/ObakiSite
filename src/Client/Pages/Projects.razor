@page "/projects"
@using ObakiSite.Application.Features.Github.Queries;
@inject ISender Mediatr
@inject ISnackbar Snackbar
<PageTitle>Projects</PageTitle>

@if (githubProjects is null)
{
    <div class="d-flex justify-center flex-row flex-wrap gap-4">
        @for (int i = 0; i < 3; i++)
        {
            <MudCard Outlined="true" Style="height:300px;">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudSkeleton Width="90%" Animation="Animation.Wave" />
                    </CardHeaderAvatar>
                </MudCardHeader>
                <MudSkeleton Width="90%" Animation="Animation.Wave" />
                <MudDivider Class="my-2" />
                <MudCardActions>
                    <MudSkeleton Width="20%" Animation="Animation.Wave" />
                    <MudSkeleton Width="20%" Animation="Animation.Wave" />
                </MudCardActions>
            </MudCard>
        }

    </div>
}
else
{
    <div class="d-flex justify-center flex-row flex-wrap gap-4">
        @foreach (var repo in githubProjects)
        {
            <MudCard Outlined="true" >
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudStack Row="true">
                            <MudText Typo="Typo.body1">@repo.Name </MudText>
                        </MudStack>
                    </CardHeaderAvatar>
                </MudCardHeader>
                <MudText Typo="Typo.body2" Class="ma-4"> @repo.Description</MudText>
                <MudChip Color="Color.Dark" Class="ml-4">  <MudIcon Icon="@Icons.Material.Filled.Stars" Color="Color.Default" Class="mr-1" /> Star: @repo.StargazersCount</MudChip>
                <MudDivider Class="my-2"/>
                <MudCardActions>
                    <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Default" Href="@repo.HtmlUrl" />
                    @if (@repo.Name.Contains("ObakiSite"))
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Link" Color="Color.Default" Href="https://www.joshuajpiluden.site/obaki" />
                    }

                </MudCardActions>
            </MudCard>
        }
    </div>
}

@code {
    private List<GithubRepoInfo>? githubProjects;
    //Todo: Check github api document if this can be queried instead.
    private List<string> currentRepos = new List<string> { "ObakiSite", "Obaki.LocalStorageCache" };
    protected override async Task OnInitializedAsync()
    {
        //Todo: Save data  in local storage to minimize API calls?
        githubProjects = new();
        foreach (string repo in currentRepos)
        {
            var result = await Mediatr.Send(new GetRepoInfo("obaki102", repo));
            if (result.IsSuccess && result.Value is not null)
            {
                githubProjects.Add(result.Value);
            }
            else
            {
                Snackbar.Add("Sorry, unable to connect to Github API.", Severity.Error);
            }
        }
    }
}
