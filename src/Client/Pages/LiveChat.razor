@layout ChatDemoLayout
@page "/liveChat"
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject IConfiguration ConfigurationManager
@inject IJSRuntime JsRuntime
@inject IChatHubClient ChatHubClient
@inject IBadgeUpdater BadgeUpdater
@inject ISnackbar Snackbar

<div id="scrollableDiv" style="overflow-y: scroll;" class="d-flex align-content-space-between flex-wrap flex-grow-1">
    <div Class="d-flex flex-column flex-grow-1 gap-1" Elevation="0">
        @foreach (var message in _messages)
        {
            @if (IsMyMessage(message.User))
            {
                <div class="d-flex justify-end">
                    <MudPaper Class="pa-2 mt-4 mb-4 mr-2 overflow-auto mud-theme-primary" MaxWidth="300px" Style="word-break: break-all;" Outlined="true">
                        <div class="d-flex flex-row">
                            <MudChip Variant="Variant.Outlined" Color="Color.Tertiary" Size="Size.Small">@message.MessageCreateDate</MudChip>
                        </div>
                        <MudText Typo="Typo.body2">@message.Message</MudText>
                    </MudPaper>
                </div>
            }
            else
            {
                <div class="d-flex justify-start">
                    <MudPaper Class="pa-2 mt-4 mb-4 ml-4 overflow-auto" MaxWidth="300px" Style="word-break: break-all;" Outlined="true">
                        <div class="d-flex flex-row">
                            <MudChip Variant="Variant.Outlined" Size="Size.Small">@message.MessageCreateDate</MudChip>
                        </div>
                        <MudText Typo="Typo.body2">@message.Message</MudText>
                    </MudPaper>
                </div>
            }
        }
    </div>
</div>

<div Class="d-flex align-content-end flex-row ma-4">
    <div class="d-flex align-center flex-row">
        <div class="d-flex ml-1 pa-1" style="width: 320px;">
            <MudTextField T="string" Label="Chatbox" Variant="Variant.Outlined" Lines="2" @bind-Value="_enteredMessage" @onkeydown="OnEnterKeyPress" @onfocus="OnFocus" TextUpdateSuppression="false" DisableUnderLine="true" Immediate="true" />
        </div>
        <div>
            <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="SendMessage" />
        </div>
    </div>
</div>


@code {
    private List<ChatMessage> _messages = new();
    private ChatMessage chatMessage = new();
    private string _enteredMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {

        ChatHubClient.OnReceivedMessage += ReceivedChatMessage;
        ChatHubClient.OnConnecting += ConnectingToServer;
        ChatHubClient.OnConnected += ConnectedToServer;
        ChatHubClient.OnClosed += ConnectionClosed;
        ChatHubClient.OnConnectionError += ConnectionError;
        await ChatHubClient.ConnectAsync();

    }

    private void ClearText()
    {
        _enteredMessage = string.Empty;
    }

    //Events
    private void ReceivedChatMessage(object? sender, ChatMessageEventArgs e)
    {
        _messages.Add(e.ChatMessage);
        _enteredMessage = string.Empty;
        if (!IsMyMessage(e.ChatMessage.User))
        {
            BadgeUpdater.IncrementBadge();
        }
        StateHasChanged();
    }

    public void ConnectingToServer(object? sender, bool isSuccess)
    {
        if (isSuccess)
        {
            Snackbar.Add("Connecting to server...", Severity.Info);
        }
    }

    public void ConnectedToServer(object? sender, bool isSuccess)
    {
        if (isSuccess)
        {
            Snackbar.Add("Connection successfully established.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Sorry something went wrong, connection was not established.", Severity.Error);
        }
    }

    public void ConnectionClosed(object? sender, ClosedConnectionEventArgs connection)
    {
        if (connection.IsSuccess)
        {
            Snackbar.Add(connection.Message, Severity.Success);
        }
        else
        {
            Snackbar.Add(connection.Message, Severity.Error);
        }
    }

    public void ConnectionError(object? sender, string Error)
    {

        Snackbar.Add($"Connection error - {Error}.", Severity.Error);

    }

    private void OnFocus()
    {
        BadgeUpdater.ResetBadge();
    }

    private async Task OnEnterKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        var chatMessage = new ChatMessage
            {
                User = ChatHubClient.HubConenctionId,
                Message = _enteredMessage
            };

        await ChatHubClient.SendMessage(chatMessage);
    }

    public bool IsMyMessage(string name)
    {
        if (name.Equals(ChatHubClient.HubConenctionId))
            return true;

        return false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeAsync<string>("ScrollToBottom", "scrollableDiv");
    }

    public async ValueTask DisposeAsync()
    {
        await ChatHubClient.DisposeAsync();
        ChatHubClient.OnReceivedMessage -= ReceivedChatMessage;
        ChatHubClient.OnConnecting -= ConnectingToServer;
        ChatHubClient.OnConnected -= ConnectedToServer;
        ChatHubClient.OnClosed -= ConnectionClosed;
        ChatHubClient.OnConnectionError -= ConnectionError;
    }
}
