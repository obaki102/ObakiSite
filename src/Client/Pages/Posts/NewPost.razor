@page "/post/create"
@layout EditPostLayout
@using WYSIWYGTextEditor;
@using ObakiSite.Application.Features.Posts.Commands;
@using ObakiSite.Application.Features.Posts.Queries;
@using ObakiSite.Shared.DTO.Response;
@inject ISender Mediatr
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<MudPaper Class="mt-16" Elevation="2" Height="800px">
    <MudTextField Style="font-size: 30px" T="string" Class="ma-4 mb-5" @bind-Value="title" Immediate="true" Variant="Variant.Text" Lines="2" />
    <div class="ma-4" style="height:600px">
        <TextEditor @ref="RichTextEditor" Placeholder="write a post..." DebugLevel="error">
            <ToolbarContent>
                <div class="ql-bubble">
                    <select class="ql-header">
                        <option selected=""></option>
                        @for (int i = 1; i < 7; i++)
                        {
                            <option value="@i"></option>
                        }

                    </select>
                    <button class="ql-font" title="Font Size" />
                    <MudTooltip Text="Bold Ctrl+B" Color="Color.Primary" Placement="Placement.Bottom">
                        <button class="ql-bold" />
                    </MudTooltip>
                    <MudTooltip Text="Italic Ctrl+I" Color="Color.Primary" Placement="Placement.Bottom">
                        <button class="ql-italic" />
                    </MudTooltip>
                    <MudTooltip Text="Underline Ctrl+U" Color="Color.Primary" Placement="Placement.Bottom">
                        <button class="ql-underline" />
                    </MudTooltip>
                    <MudTooltip Text="Strike" Color="Color.Primary" Placement="Placement.Bottom">
                        <button class="ql-strike" />
                    </MudTooltip>
                    <MudTooltip Text="Color" Color="Color.Primary" Placement="Placement.Bottom">
                        <select class="ql-color" />
                    </MudTooltip>
                    <MudTooltip Text="Background" Color="Color.Primary" Placement="Placement.Bottom">
                        <select class="ql-background" />
                    </MudTooltip>
                    <MudTooltip Text="List" Color="Color.Primary" Placement="Placement.Bottom">
                        <button class="ql-list" value="ordered" />
                    </MudTooltip>
                    <MudTooltip Text="Bullet" Color="Color.Primary" Placement="Placement.Bottom">
                        <button class="ql-list" value="bullet" />
                    </MudTooltip>
                    <MudTooltip Text="Indent Left" Color="Color.Primary" Placement="Placement.Bottom">
                        <button class="ql-indent" value="-1" />
                    </MudTooltip>
                    <MudTooltip Text="Indent Right" Color="Color.Primary" Placement="Placement.Bottom">
                        <button class="ql-indent" value="+1" />
                    </MudTooltip>
                    <MudTooltip Text="Code Block" Color="Color.Primary" Placement="Placement.Bottom">
                        <button class="ql-code-block" />
                    </MudTooltip>
                    <MudTooltip Text="Video Link" Color="Color.Primary" Placement="Placement.Bottom">
                        <button class="ql-video" />
                    </MudTooltip>
                    <MudTooltip Text="Image" Color="Color.Primary" Placement="Placement.Bottom">
                        <button class="ql-image"></button>
                    </MudTooltip>
                </div>
            </ToolbarContent>
        </TextEditor>
    </div>
</MudPaper>
<MudAppBar Bottom="true" Fixed="true" Color="Color.Dark" Elevation="1">
    <MudContainer MaxWidth="MaxWidth.Medium">
        <div class="d-flex flex-row ma-4">
            <div class="mr-4">
                @if (!isPosting)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" OnClick="@PublishPost">Publish</MudButton>
                }
                else
                {
                    <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
                }
            </div>
            <div>  <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" OnClick="@SaveDraft">Save Draft</MudButton></div>
        </div>

    </MudContainer>
</MudAppBar>


@code
{


    private bool isPosting = false;
    private TextEditor? RichTextEditor;
    private MarkupString body;
    private string title { get; set; } = "Write your title here...";

    protected override async Task OnInitializedAsync()
    {
        var result = await Mediatr.Send(new GetSavedPostDraft());
        if (result.Data is not null && result.IsSuccess)
        {
            title = result.Data.Title;
            if (RichTextEditor is not null)
            {
                await RichTextEditor.LoadHTMLContent(result.Data.HtmlBody);
            }
        }
    }

    private async Task PublishPost()
    {
        isPosting = true;
        var textContent = await GetHtmlStringValue();
        var post = new PostDTO
            {
                Created = DateTime.Now,
                HtmlBody = textContent,
                Title = title
            };
        var command = new CreatePost(post);
        var result = await Mediatr.Send(command);

        Notify(result, "post");
        isPosting = false;

        if (result.IsSuccess)
        {
            await Mediatr.Send(new ClearDraftPost());
            NavManager.NavigateTo($"/post/view/{post.Id}");
        }
    }

    private async Task SaveDraft()
    {
        var post = new PostDTO
            {
                Created = DateTime.Now,
                HtmlBody = await GetHtmlStringValue(),
                Title = title
            };

        var command = new SaveDraftPost(post);
        var result = await Mediatr.Send(command);
        Notify(result, "draft");

    }
    //Helper Methods
    private async Task<string> GetHtmlStringValue()
    {
        return RichTextEditor != null ? await RichTextEditor.GetHTML() : string.Empty;
    }

    private async Task ShowAoutPutPreview()
    {
        var hmltContent = await GetHtmlStringValue();
        body = (MarkupString)hmltContent;
    }

    private void Notify(ApplicationResponse result, string origin)
    {
        //Todo: refine how messages are displayed
        if (result.IsSuccess)
        {
            var message = origin switch
            {
                "post" => "Post has been published.",
                "draft" => "Draft saved.",
                _ => ""
            };
            Snackbar.Add(message, Severity.Success);
        }
        else
        {
            if (result.Messages.Count > 0)
            {
                foreach (var error in result.Messages)
                    Snackbar.Add(error, Severity.Error);
            }
            var errorMessage = origin switch
            {
                "post" => "Sorry, unable to publish your post.",
                "draft" => "Sorry, draft was not saved.",
                _ => ""
            };
            Snackbar.Add(errorMessage, Severity.Error);
        }
        StateHasChanged();
    }
}
