@page "/post/edit/{id}"
@layout EmptyLayout
@using Blazored.TextEditor
@using ObakiSite.Application.Features.Posts.Commands;
@using ObakiSite.Application.Features.Posts.Queries;
@using ObakiSite.Shared.DTO.Response;
@inject ISender Mediatr
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

@*Todo: implement authorization once account  and access is implemented*@
<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
    <MudSnackbarProvider />
    <div class="d-flex flex-column">
        <MudAppBar Fixed="true" Color="Color.Dark" Elevation="0">
            <MudContainer MaxWidth="MaxWidth.Large">
                <div class="d-flex align-center my-8">
                    <MudChip Color="Color.Dark" Href="/"><MudText Typo="Typo.button" Style="font-size: 35px;">O</MudText><MudText Typo="Typo.caption" Style="font-size: 20px;">baki</MudText></MudChip>
                    <MudDivider Class="ma-1" Vertical="true" FlexItem="true" />
                    <MudText Class="ml-4">Create Post</MudText>
                </div>
            </MudContainer>
        </MudAppBar>
        <MudPaper Class="mt-16" Elevation="2" Height="800px">
            <MudTextField Style="font-size: 30px" T="string" Class="ma-4 mb-5" @bind-Value="title" Immediate="true" Variant="Variant.Text" Lines="2" />
            <div class="ma-4" style="height:600px">
                <BlazoredTextEditor @ref=RichTextEditor Placeholder="write a post..." DebugLevel="error">
                    <ToolbarContent>
                        <div class="ql-bubble">
                            <select class="ql-header">
                                <option selected=""></option>
                                @for (int i = 1; i < 7; i++)
                                {
                                    <option value="@i"></option>
                                }

                            </select>
                            <button class="ql-font" title="Font Size" />
                            <MudTooltip Text="Bold Ctrl+B" Color="Color.Primary" Placement="Placement.Bottom">
                                <button class="ql-bold" />
                            </MudTooltip>
                            <MudTooltip Text="Italic Ctrl+I" Color="Color.Primary" Placement="Placement.Bottom">
                                <button class="ql-italic" />
                            </MudTooltip>
                            <MudTooltip Text="Underline Ctrl+U" Color="Color.Primary" Placement="Placement.Bottom">
                                <button class="ql-underline" />
                            </MudTooltip>
                            <MudTooltip Text="Strike" Color="Color.Primary" Placement="Placement.Bottom">
                                <button class="ql-strike" />
                            </MudTooltip>
                            <MudTooltip Text="Color" Color="Color.Primary" Placement="Placement.Bottom">
                                <select class="ql-color" />
                            </MudTooltip>
                            <MudTooltip Text="Background" Color="Color.Primary" Placement="Placement.Bottom">
                                <select class="ql-background" />
                            </MudTooltip>
                            <MudTooltip Text="List" Color="Color.Primary" Placement="Placement.Bottom">
                                <button class="ql-list" value="ordered" />
                            </MudTooltip>
                            <MudTooltip Text="Bullet" Color="Color.Primary" Placement="Placement.Bottom">
                                <button class="ql-list" value="bullet" />
                            </MudTooltip>
                            <MudTooltip Text="Indent Left" Color="Color.Primary" Placement="Placement.Bottom">
                                <button class="ql-indent" value="-1" />
                            </MudTooltip>
                            <MudTooltip Text="Indent Right" Color="Color.Primary" Placement="Placement.Bottom">
                                <button class="ql-indent" value="+1" />
                            </MudTooltip>
                            <MudTooltip Text="Code Block" Color="Color.Primary" Placement="Placement.Bottom">
                                <button class="ql-code-block" />
                            </MudTooltip>
                            <MudTooltip Text="Video Link" Color="Color.Primary" Placement="Placement.Bottom">
                                <button class="ql-video" />
                            </MudTooltip>

                            @*  <span class="ql-formats">
                            <button class="ql-image"></button>
                            </span>*@
                        </div>
                    </ToolbarContent>
                </BlazoredTextEditor>
            </div>
        </MudPaper>
        <MudCard Outlined="true" Elevation="25" Class="mt-4">
            <MudText Class="ma-4 mud-secondary-text" Typo="Typo.caption" GutterBottom="true" Style="font-size: 20px;">This feature is still in development</MudText>
            <MudCardContent>
                <MudText Typo="Typo.body2">
                    Attaching an image is yet to be implemented. I'm still deciding what storage store to use at the minimum cost.  :)
                </MudText>
            </MudCardContent>
        </MudCard>
    </div>

    <MudAppBar Bottom="true" Fixed="true" Color="Color.Dark" Elevation="1">
        <MudContainer MaxWidth="MaxWidth.Large">
            <div class="d-flex flex-row ma-4">
                <div class="mr-4">
                    @if (!isPosting)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" OnClick="@ModifyPost">Save Changes</MudButton>
                    }
                    else
                    {
                        <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
                    }
                </div>
            </div>

        </MudContainer>
    </MudAppBar>
</MudContainer>

@code
{
    [Parameter]
    public string Id { get; set; } = string.Empty;
    //todo: Global theme defaults accross all layouts.
    private MudTheme _theme = Theme.Default();
    private bool _isDarkMode = true;
    private bool isPosting = false;
    private BlazoredTextEditor? RichTextEditor;
    private MarkupString body;
    private string title { get; set; } = "Write your title here...";

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            var result = await Mediatr.Send(new GetPostById(Id));
            if (result.Data is not null && result.IsSuccess)
            {
                title = result.Data.Title;
                if (RichTextEditor is not null)
                {
                    await RichTextEditor.LoadHTMLContent(result.Data.HtmlBody);
                }
            }
        }
    }

    private async Task ModifyPost()
    {
        isPosting = true;
        var textContent = await GetHtmlStringValue();
        var post = new PostDTO
            {
                Id = Id,
                Created = DateTime.Now,
                HtmlBody = textContent,
                Title = title
            };
        var command = new UpdatePost(post);
        var result = await Mediatr.Send(command);

        Notify(result, "post");
        isPosting = false;

        if (result.IsSuccess)
        {
            await Mediatr.Send(new ClearDraftPost());
            NavManager.NavigateTo($"/post/view/{post.Id}");
        }
    }

    
    //Helper Methods
    private async Task<string> GetHtmlStringValue()
    {
        return RichTextEditor != null ? await RichTextEditor.GetHTML() : string.Empty;
    }

    private async Task ShowAoutPutPreview()
    {
        var hmltContent = await GetHtmlStringValue();
        body = (MarkupString)hmltContent;
    }

    private void Notify(ApplicationResponse result, string origin)
    {
        //Todo: refine how messages are displayed
        //Todo: create a utility service that can be utilized by different pages.
        if (result.IsSuccess)
        {
            var message = origin switch
            {
                "post" => "Changes saved.",
                "draft" => "Draft saved.",
                _ => ""
            };
            Snackbar.Add(message, Severity.Success);
        }
        else
        {
            if (result.Messages.Count > 0)
            {
                foreach (var error in result.Messages)
                    Snackbar.Add(error, Severity.Error);
            }
            var errorMessage = origin switch
            {
                "post" => "Sorry, unable to save your post.",
                "draft" => "Sorry, draft was not saved.",
                _ => ""
            };
            Snackbar.Add(errorMessage, Severity.Error);
        }
        StateHasChanged();
    }
}
