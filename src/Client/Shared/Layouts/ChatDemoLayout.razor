@using ObakiSite.Client.Services.Components.Badge
@implements IDisposable
@inherits LayoutComponentBase
@inject IBadgeUpdater BadgeUpdater
<MudThemeProvider @bind-IsDarkMode="_isDarkMode" Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudContainer MaxWidth="MaxWidth.Large">
            <div class="d-flex align-center" Elevation="1">
                <a class="mt-2" href="/"> <MudImage Src="/img/logo.png" Width="70" Height="45" ObjectFit="ObjectFit.Cover" Elevation="2" Class="rounded-lg" /></a>
                <MudSpacer />
                @if (_bagedeNo == 0)
                {
                    <MudTooltip Text="Chat" Color="Color.Primary" Placement="Placement.Bottom">
                        <MudIconButton Icon="@Icons.Material.Filled.Chat" Color="Color.Primary" OnClick="@OpenDrawer" />
                    </MudTooltip>
                }
                else
                {
                    <PageTitle>
                        New Message: @_bagedeNo
                    </PageTitle>
                    <MudTooltip Text="Chat" Color="Color.Primary" Placement="Placement.Bottom">
                        <MudBadge Content="@_bagedeNo" Color="Color.Primary" Overlap="true" Class="mx-6 my-4">
                            <MudIconButton Icon="@Icons.Material.Filled.Chat" Color="Color.Primary" OnClick="@OpenDrawer" />
                        </MudBadge>
                    </MudTooltip>
                }
            </div>
        </MudContainer>
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" DisableOverlay="true" Width="400px" Height="100%" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Responsive">
        <MudTooltip Text="Back" Color="Color.Primary" Placement="Placement.Bottom">
            <MudIconButton Icon="@Icons.Filled.ArrowBack" Color="Color.Primary" OnClick="@OpenDrawer" />
        </MudTooltip>
        <LiveChat />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium" Class="my-4">
            <ErrorBoundary>
                <ChildContent>
                    <div class="d-flex flex-column flex-grow-1 gap-4" Elevation="0">
                        <div class="d-flex" style="height:100%">
                            <MudText Class="my-auto" Typo="Typo.caption" GutterBottom="true" Style="font-size: 20px;">Chat Demo</MudText>
                        </div>
                        <MudCard Outlined="true" Elevation="25">
                            <MudCardContent>
                                <MudText Typo="Typo.body2">
                                    This is a simple demonstration of a chat application made possible by SignalR.
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    You can duplicate this tab  or open a new window to try playing around with the app.
                                </MudText>
                                @* <MudListItem Text="I am only using  free SKU for my Azure SignalR, I notice that there are times connection is lost to the server." Icon="@Icons.Filled.Warning" IconColor="Color.Secondary" />*@
                            </MudCardContent>
                        </MudCard>
                    </div>
                </ChildContent>
                <ErrorContent Context="Exception">
                    <MudChip Color="Color.Secondary">@Exception.GetType()</MudChip>
                    <MudChip Color="Color.Secondary">@Exception.Message</MudChip>
                    <p class="errorUI">Nothing to see here right now. Sorry!</p>
                </ErrorContent>
            </ErrorBoundary>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    [CascadingParameter] public CascadingAppState? AppState { get; set; }
    private MudTheme _theme = Theme.Default();
    private bool _isDarkMode = true;
    private int _bagedeNo = 0;
    bool _drawerOpen = true;

    public void OpenDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        if (AppState is not null)
        {
            _isDarkMode = await AppState.IsDarkMode();
        }
        BadgeUpdater.BadgeChangedHandler += UpdateBadge;
    }

    public void UpdateBadge(object? sender, int badgeNo)
    {
        _bagedeNo = badgeNo;
        StateHasChanged();
    }
    public void Dispose()
    {
        BadgeUpdater.BadgeChangedHandler -= UpdateBadge;
    }
}
