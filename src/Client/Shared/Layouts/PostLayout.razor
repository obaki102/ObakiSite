@inherits LayoutComponentBase
<CascadingValue Value="@_isDarkMode">
<MudLayout>
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
        <MudThemeProvider @bind-IsDarkMode="_isDarkMode" Theme="_theme" />
        <MudSnackbarProvider />
        <div class="d-flex flex-column">
            <MudAppBar Fixed="true" Elevation="0">
                <MudContainer MaxWidth="MaxWidth.Large">
                    <div class="d-flex align-center my-8">
                        <a class="mt-2" href="/obaki"> <MudImage Src="/img/logo.png" Width="70" Height="45" ObjectFit="ObjectFit.Cover" Elevation="2" Class="rounded-lg" /></a>
                        <MudDivider Class="my-4 mr-2 ml-4" Vertical="true" FlexItem="true" />
                        <MudText Class="ml-4">Create Post</MudText>
                    </div>
                </MudContainer>
            </MudAppBar>
            <ErrorBoundary>
                <ChildContent>  @Body </ChildContent>
                <ErrorContent Context="Exception">
                    <MudChip Color="Color.Secondary">@Exception.GetType()</MudChip>
                    <MudChip Color="Color.Secondary">@Exception.Message</MudChip>
                    <p class="errorUI">Nothing to see here right now. Sorry!</p>
                </ErrorContent>
            </ErrorBoundary>
            <MudScrollToTop>
                <MudFab Color="Color.Tertiary" Icon="@Icons.Material.Filled.ArrowCircleUp" />
            </MudScrollToTop>
        </div>
    </MudContainer>
</MudLayout>
</CascadingValue>
@code {
    [CascadingParameter] public CascadingAppState? AppState { get; set; }
    private MudTheme _theme = Theme.Default();
    private bool _isDarkMode = true;

    protected override async Task OnInitializedAsync()
    {
        if (AppState is not null)
        {
            _isDarkMode = await AppState.IsDarkMode();
        }
    }
}
